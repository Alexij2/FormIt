<?xml version="1.0"?>
<project version="0.11.2" title="FormIt API Documentation">
  <file path="fihooks.class.php" hash="2b05213dbdefac20f17bd6f3daed4be7">
    <docblock>
      <description>FormIt</description>
      <long-description>&lt;p&gt;Copyright 2009-2011 by Shaun McCormick &lt;a href="&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#116;&amp;#111;&amp;#58;&amp;#115;&amp;#104;&amp;#x61;&amp;#x75;&amp;#x6e;&amp;#x40;&amp;#x6d;&amp;#111;&amp;#100;&amp;#120;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;"&gt;&amp;#115;&amp;#104;&amp;#x61;&amp;#x75;&amp;#x6e;&amp;#x40;&amp;#x6d;&amp;#111;&amp;#100;&amp;#120;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FormIt is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option) any
later version.&lt;/p&gt;

&lt;p&gt;FormIt is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU General Public License along with
FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,
Suite 330, Boston, MA 02111-1307 USA&lt;/p&gt;
</long-description>
      <tag name="package" description="formit"/>
    </docblock>
    <class final="false" abstract="false" line="27" namespace="default">
      <name>fiHooks</name>
      <extends/>
      <full_name>\fiHooks</full_name>
      <docblock>
        <description>Base Hooks handling class</description>
        <long-description>
</long-description>
        <tag name="package" description="formit" line="22"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="33">
        <name>$errors</name>
        <default>array</default>
        <docblock>
          <description>A collection of all the processed errors so far.</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="array" line="28">
            <type by_reference="false">array</type>
          </tag>
          <tag name="access" description="public" line="28"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="39">
        <name>$hooks</name>
        <default>array</default>
        <docblock>
          <description>A collection of all the processed hooks so far.</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="array" line="34">
            <type by_reference="false">array</type>
          </tag>
          <tag name="access" description="public" line="34"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="45">
        <name>$modx</name>
        <default>null</default>
        <docblock>
          <description>A reference to the modX instance.</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="\modX" line="40">
            <type by_reference="false">\modX</type>
          </tag>
          <tag name="access" description="public" line="40"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="51">
        <name>$formit</name>
        <default>null</default>
        <docblock>
          <description>A reference to the FormIt instance.</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="\FormIt" line="46">
            <type by_reference="false">\FormIt</type>
          </tag>
          <tag name="access" description="public" line="46"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="57">
        <name>$redirectUrl</name>
        <default>null</default>
        <docblock>
          <description>If a hook redirects, it needs to set this var to use proper order of execution on redirects/stores</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="string" line="52">
            <type by_reference="false">string</type>
          </tag>
          <tag name="access" description="public" line="52"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="63">
        <name>$fields</name>
        <default>array</default>
        <docblock>
          <description>The current stored and parsed fields for the FormIt call.</description>
          <long-description>
</long-description>
          <tag name="var" description="" type="array" line="59">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="72">
        <name>__construct</name>
        <docblock>
          <description>The constructor for the fiHooks class</description>
          <long-description>
</long-description>
          <tag name="param" description="&amp;amp;$formit A reference to the FormIt class instance." type="\FormIt" variable="$formit" line="65">
            <type by_reference="false">\FormIt</type>
          </tag>
          <tag name="param" description="Optional. An array of configuration parameters." type="array" variable="$config" line="65">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="" type="\fiHooks" line="65">
            <type by_reference="false">\fiHooks</type>
          </tag>
        </docblock>
        <argument line="72">
          <name>$formit</name>
          <default/>
          <type>FormIt</type>
        </argument>
        <argument line="72">
          <name>$config</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="88">
        <name>loadMultiple</name>
        <docblock>
          <description>Loads an array of hooks. If one fails, will not proceed.</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="79"/>
          <tag name="param" description="The hooks to run." type="array" variable="$hooks" line="79">
            <type by_reference="false">array</type>
          </tag>
          <tag name="param" description="The fields and values of the form" type="array" variable="$fields" line="79">
            <type by_reference="false">array</type>
          </tag>
          <tag name="param" description="An array of extra properties to send to the hook" type="array" variable="$customProperties" line="79">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="An array of field name =&amp;gt; value pairs." type="array" line="79">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="88">
          <name>$hooks</name>
          <default/>
          <type/>
        </argument>
        <argument line="88">
          <name>$fields</name>
          <default>array</default>
          <type>array</type>
        </argument>
        <argument line="88">
          <name>$customProperties</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="112">
        <name>load</name>
        <docblock>
          <description>Load a hook. Stores any errors for the hook to $this-&gt;errors.</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="103"/>
          <tag name="param" description="The name of the hook. May be a Snippet name." type="string" variable="$hook" line="103">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The fields and values of the form." type="array" variable="$fields" line="103">
            <type by_reference="false">array</type>
          </tag>
          <tag name="param" description="Any other custom properties to load into a custom hook." type="array" variable="$customProperties" line="103">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="True if hook was successful." type="boolean" line="103">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="112">
          <name>$hook</name>
          <default/>
          <type/>
        </argument>
        <argument line="112">
          <name>$fields</name>
          <default>array</default>
          <type>array</type>
        </argument>
        <argument line="112">
          <name>$customProperties</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="154">
        <name>getErrorMessage</name>
        <docblock>
          <description>Gets the error messages compiled into a single string.</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="147"/>
          <tag name="param" description="The delimiter between each message." type="string" variable="$delim" line="147">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="The concatenated error message" type="string" line="147">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="154">
          <name>$delim</name>
          <default>\n</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="166">
        <name>addError</name>
        <docblock>
          <description>Adds an error to the stack.</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="158"/>
          <tag name="param" description="The field to add the error to." type="string" variable="$key" line="158">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The error message." type="string" variable="$value" line="158">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="The added error message with the error wrapper." type="string" line="158">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="166">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="166">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="178">
        <name>setValue</name>
        <docblock>
          <description>Sets the value of a field.</description>
          <long-description>
</long-description>
          <tag name="param" description="The field name to set." type="string" variable="$key" line="171">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value to set to the field." type="mixed" variable="$value" line="171">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="return" description="The set value." type="mixed" line="171">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="178">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="178">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="188">
        <name>setValues</name>
        <docblock>
          <description>Sets an associative array of field name and values.</description>
          <long-description>
</long-description>
          <tag name="param" description="A key/name pair of fields and values to set." type="array" variable="$values" line="183">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="188">
          <name>$values</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="200">
        <name>getValue</name>
        <docblock>
          <description>Gets the value of a field.</description>
          <long-description>
</long-description>
          <tag name="param" description="The field name to get." type="string" variable="$key" line="194">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="The value of the key, or null if non-existent." type="mixed" line="194">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="200">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="212">
        <name>getValues</name>
        <docblock>
          <description>Gets an associative array of field name and values.</description>
          <long-description>
</long-description>
          <tag name="return" description="$values A key/name pair of fields and values." type="array" line="207">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="225">
        <name>redirect</name>
        <docblock>
          <description>Redirect to a specified URL.</description>
          <long-description>&lt;p&gt;Properties needed:
- redirectTo - the ID of the Resource to redirect to.&lt;/p&gt;
</long-description>
          <tag name="param" description="An array of cleaned POST fields" type="array" variable="$fields" line="216">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="False if unsuccessful." type="boolean" line="216">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="225">
          <name>$fields</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="263">
        <name>email</name>
        <docblock>
          <description>Send an email of the form.</description>
          <long-description>&lt;p&gt;Properties:
- emailTpl - The chunk name of the chunk that will be the email template.
This will send the values of the form as placeholders.
- emailTo - A comma separated list of email addresses to send to
- emailToName - A comma separated list of names to pair with addresses.
- emailFrom - The From: email address. Defaults to either the email
field or the emailsender setting.
- emailFromName - The name of the From: user.
- emailSubject - The subject of the email.
- emailHtml - Boolean, if true, email will be in HTML mode.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="245"/>
          <tag name="param" description="An array of cleaned POST fields" type="array" variable="$fields" line="245">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="True if email was successfully sent." type="boolean" line="245">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="263">
          <name>$fields</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="444">
        <name>_process</name>
        <docblock>
          <description>Processes string and sets placeholders</description>
          <long-description>
</long-description>
          <tag name="param" description="The string to process" type="string" variable="$str" line="437">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="An array of placeholders to replace with values" type="array" variable="$placeholders" line="437">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="The parsed string" type="string" line="437">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="444">
          <name>$str</name>
          <default/>
          <type/>
        </argument>
        <argument line="444">
          <name>$placeholders</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="461">
        <name>spam</name>
        <docblock>
          <description>Ensure the a field passes a spam filter.</description>
          <long-description>&lt;p&gt;Properties:
- spamEmailFields - The email fields to check. A comma-delimited list.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="451"/>
          <tag name="param" description="An array of cleaned POST fields" type="array" variable="$fields" line="451">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="True if email was successfully sent." type="boolean" line="451">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="461">
          <name>$fields</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="492">
        <name>recaptcha</name>
        <docblock>
          <description>Adds in reCaptcha support to FormIt</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="485"/>
          <tag name="param" description="An array of cleaned POST fields" type="array" variable="$fields" line="485">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="True if email was successfully sent." type="boolean" line="485">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="492">
          <name>$fields</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="514">
        <name>setRedirectUrl</name>
        <docblock>
          <description>Set a URL to redirect to after all hooks run successfully.</description>
          <long-description>
</long-description>
          <tag name="param" description="The URL to redirect to after all hooks execute" type="string" variable="$url" line="509">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="514">
          <name>$url</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="525">
        <name>math</name>
        <docblock>
          <description>Math field hook for anti-spam math input field.</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="518"/>
          <tag name="param" description="An array of cleaned POST fields" type="array" variable="$fields" line="518">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="True if email was successfully sent." type="boolean" line="518">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="525">
          <name>$fields</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
    </class>
  </file>
  <file path="fivalidator.class.php" hash="fa0771b1db800383d466549c823912fe">
    <docblock>
      <description>FormIt</description>
      <long-description>&lt;p&gt;Copyright 2009-2011 by Shaun McCormick &lt;a href="&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#116;&amp;#111;&amp;#58;&amp;#115;&amp;#104;&amp;#x61;&amp;#x75;&amp;#x6e;&amp;#x40;&amp;#x6d;&amp;#111;&amp;#100;&amp;#120;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;"&gt;&amp;#115;&amp;#104;&amp;#x61;&amp;#x75;&amp;#x6e;&amp;#x40;&amp;#x6d;&amp;#111;&amp;#100;&amp;#120;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FormIt is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option) any
later version.&lt;/p&gt;

&lt;p&gt;FormIt is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU General Public License along with
FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,
Suite 330, Boston, MA 02111-1307 USA&lt;/p&gt;
</long-description>
      <tag name="package" description="formit"/>
    </docblock>
    <class final="false" abstract="false" line="27" namespace="default">
      <name>fiValidator</name>
      <extends/>
      <full_name>\fiValidator</full_name>
      <docblock>
        <description>Handles custom validaton</description>
        <long-description>
</long-description>
        <tag name="package" description="formit" line="22"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="32">
        <name>$errors</name>
        <default>array</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="var" description="A collection of all the processed errors so far." type="array" line="28">
            <type by_reference="false">array</type>
          </tag>
          <tag name="access" description="public" line="28"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="37">
        <name>$errorsRaw</name>
        <default>array</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="var" description="A collection of all the non-processed errors so far." type="array" line="33">
            <type by_reference="false">array</type>
          </tag>
          <tag name="access" description="public" line="33"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="42">
        <name>$fields</name>
        <default>array</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="var" description="A collection of all the validated fields so far." type="array" line="38">
            <type by_reference="false">array</type>
          </tag>
          <tag name="access" description="public" line="38"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="47">
        <name>$modx</name>
        <default>null</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="var" description="A reference to the modX instance." type="\modX" line="43">
            <type by_reference="false">\modX</type>
          </tag>
          <tag name="access" description="public" line="43"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="public" line="52">
        <name>$formit</name>
        <default>null</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="var" description="A reference to the FormIt instance." type="\FormIt" line="48">
            <type by_reference="false">\FormIt</type>
          </tag>
          <tag name="access" description="public" line="48"/>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="61">
        <name>__construct</name>
        <docblock>
          <description>The constructor for the fiValidator class</description>
          <long-description>
</long-description>
          <tag name="param" description="&amp;amp;$formit A reference to the FormIt class instance." type="\FormIt" variable="$formit" line="54">
            <type by_reference="false">\FormIt</type>
          </tag>
          <tag name="param" description="Optional. An array of configuration parameters." type="array" variable="$config" line="54">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="" type="\fiValidator" line="54">
            <type by_reference="false">\fiValidator</type>
          </tag>
        </docblock>
        <argument line="61">
          <name>$formit</name>
          <default/>
          <type>FormIt</type>
        </argument>
        <argument line="61">
          <name>$config</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="84">
        <name>validateFields</name>
        <docblock>
          <description>Validates an array of fields. Returns the field names and values, with
the field names stripped of their validators.</description>
          <long-description>&lt;p&gt;The key names can be in this format:&lt;/p&gt;

&lt;p&gt;name:validator=param:anotherValidator:oneMoreValidator=&lt;code&gt;param&lt;/code&gt;&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="71"/>
          <tag name="param" description="The fields to validate." type="array" variable="$keys" line="71">
            <type by_reference="false">array</type>
          </tag>
          <tag name="param" description="" type="string" variable="$validationFields" line="71">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="An array of field name =&amp;gt; value pairs." type="array" line="71">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="84">
          <name>$keys</name>
          <default>array</default>
          <type>array</type>
        </argument>
        <argument line="84">
          <name>$validationFields</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="137">
        <name>_validate</name>
        <docblock>
          <description>Helper method for validating fields</description>
          <long-description>
</long-description>
          <tag name="param" description="" type="string" variable="$k" line="130">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="" type="string" variable="$v" line="130">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="" type="array" variable="$fieldValidators" line="130">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="" type="void" line="130">
            <type by_reference="false">void</type>
          </tag>
        </docblock>
        <argument line="137">
          <name>$k</name>
          <default/>
          <type/>
        </argument>
        <argument line="137">
          <name>$v</name>
          <default/>
          <type/>
        </argument>
        <argument line="137">
          <name>$fieldValidators</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="187">
        <name>validate</name>
        <docblock>
          <description>Validates a field based on a custom rule, if specified</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="176"/>
          <tag name="param" description="The key of the field" type="string" variable="$key" line="176">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="mixed" variable="$value" line="176">
            <type by_reference="false">mixed</type>
          </tag>
          <tag name="param" description="Optional. The type of the validator to apply. Can either be a method name of fiValidator or a Snippet name." type="string" variable="$type" line="176">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="True if validation was successful. If not, will store error messages to $this-&amp;gt;errors." type="boolean" line="176">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="187">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="187">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="187">
          <name>$type</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="250">
        <name>addError</name>
        <docblock>
          <description>Adds an error to the stack.</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="242"/>
          <tag name="param" description="The field to add the error to." type="string" variable="$key" line="242">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The error message." type="string" variable="$value" line="242">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="The added error message with the error wrapper." type="string" line="242">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="250">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="250">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="266">
        <name>required</name>
        <docblock>
          <description>Checks to see if field is required.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="260">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="260">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="boolean" line="260">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="266">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="266">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="282">
        <name>blank</name>
        <docblock>
          <description>Checks to see if field is blank.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="276">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="276">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="boolean" line="276">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="282">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="282">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="293">
        <name>password_confirm</name>
        <docblock>
          <description>Checks to see if passwords match.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="286">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="286">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The parameter passed into the validator that contains the field to check the password against" type="string" variable="$param" line="286">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="boolean" line="286">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="293">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="293">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="293">
          <name>$param</name>
          <default>password_confirm</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="307">
        <name>email</name>
        <docblock>
          <description>Checks to see if field value is an actual email address.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="301">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="301">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="boolean" line="301">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="307">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="307">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="353">
        <name>minLength</name>
        <docblock>
          <description>Checks to see if field value is shorter than $param.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="346">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="346">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The minimum length the field can be" type="int" variable="$param" line="346">
            <type by_reference="false">int</type>
          </tag>
          <tag name="return" description="" type="boolean" line="346">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="353">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="353">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="353">
          <name>$param</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="368">
        <name>maxLength</name>
        <docblock>
          <description>Checks to see if field value is longer than $param.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="361">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="361">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The maximum length the field can be" type="int" variable="$param" line="361">
            <type by_reference="false">int</type>
          </tag>
          <tag name="return" description="" type="boolean" line="361">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="368">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="368">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="368">
          <name>$param</name>
          <default>999</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="383">
        <name>minValue</name>
        <docblock>
          <description>Checks to see if field value is less than $param.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="376">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="376">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The minimum value the field can be" type="int" variable="$param" line="376">
            <type by_reference="false">int</type>
          </tag>
          <tag name="return" description="" type="boolean" line="376">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="383">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="383">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="383">
          <name>$param</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="397">
        <name>maxValue</name>
        <docblock>
          <description>Checks to see if field value is greater than $param.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="390">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="390">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The maximum value the field can be" type="int" variable="$param" line="390">
            <type by_reference="false">int</type>
          </tag>
          <tag name="return" description="" type="boolean" line="390">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="397">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="397">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="397">
          <name>$param</name>
          <default>0</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="411">
        <name>contains</name>
        <docblock>
          <description>See if field contains a certain value.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="404">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="404">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The regular expression to check against the field" type="string" variable="$expr" line="404">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="boolean" line="404">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="411">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="411">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="411">
          <name>$expr</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="425">
        <name>strip</name>
        <docblock>
          <description>Strip a string from the value.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="418">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="418">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value to strip from the field" type="string" variable="$param" line="418">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="boolean" line="418">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="425">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="425">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="425">
          <name>$param</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="437">
        <name>stripTags</name>
        <docblock>
          <description>Strip all tags in the field. The parameter can be a string of allowed
tags.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="429">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="429">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="A comma-separated list of tags to allow in the field&amp;#039;s value" type="string" variable="$allowedTags" line="429">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="boolean" line="429">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="437">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="437">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="437">
          <name>$allowedTags</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="450">
        <name>allowTags</name>
        <docblock>
          <description>Strip all tags in the field. The parameter can be a string of allowed
tags.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="442">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="442">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="A comma-separated list of tags to allow in the field&amp;#039;s value. Leave blank to allow all." type="string" variable="$allowedTags" line="442">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="boolean" line="442">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="450">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="450">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="450">
          <name>$allowedTags</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="463">
        <name>range</name>
        <docblock>
          <description>Validates value between a range, specified by min-max.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="456">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="456">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The range the value should reside in" type="string" variable="$ranges" line="456">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="boolean" line="456">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="463">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="463">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="463">
          <name>$ranges</name>
          <default>0-1</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="485">
        <name>isNumber</name>
        <docblock>
          <description>Checks to see if the field is a number.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="479">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="479">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="boolean" line="479">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="485">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="485">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="500">
        <name>isDate</name>
        <docblock>
          <description>Checks to see if the field is a valid date. Allows for date formatting as
well.</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="492">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="492">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The format of the date" type="string" variable="$format" line="492">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="boolean" line="492">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="500">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="500">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
        <argument line="500">
          <name>$format</name>
          <default>%m/%d/%Y</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="517">
        <name>islowercase</name>
        <docblock>
          <description>Checks to see if a string is all lowercase</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="511">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="511">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="boolean" line="511">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="517">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="517">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="528">
        <name>isuppercase</name>
        <docblock>
          <description>Checks to see if a string is all uppercase</description>
          <long-description>
</long-description>
          <tag name="param" description="The name of the field" type="string" variable="$key" line="522">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The value of the field" type="string" variable="$value" line="522">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="boolean" line="522">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
        <argument line="528">
          <name>$key</name>
          <default/>
          <type/>
        </argument>
        <argument line="528">
          <name>$value</name>
          <default/>
          <type/>
        </argument>
      </method>
    </class>
  </file>
  <file path="formit.class.php" hash="7369dc743bb4f6d55971dc56a7f9bd7f">
    <docblock>
      <description>FormIt</description>
      <long-description>&lt;p&gt;Copyright 2009-2011 by Shaun McCormick &lt;a href="&amp;#x6d;&amp;#x61;&amp;#x69;&amp;#x6c;&amp;#116;&amp;#111;&amp;#58;&amp;#115;&amp;#104;&amp;#x61;&amp;#x75;&amp;#x6e;&amp;#x40;&amp;#x6d;&amp;#111;&amp;#100;&amp;#120;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;"&gt;&amp;#115;&amp;#104;&amp;#x61;&amp;#x75;&amp;#x6e;&amp;#x40;&amp;#x6d;&amp;#111;&amp;#100;&amp;#120;&amp;#46;&amp;#99;&amp;#x6f;&amp;#x6d;&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;FormIt is free software; you can redistribute it and/or modify it
under the terms of the GNU General Public License as published by the Free
Software Foundation; either version 2 of the License, or (at your option) any
later version.&lt;/p&gt;

&lt;p&gt;FormIt is distributed in the hope that it will be useful, but WITHOUT ANY
WARRANTY; without even the implied warranty of MERCHANTABILITY or FITNESS FOR
A PARTICULAR PURPOSE. See the GNU General Public License for more details.&lt;/p&gt;

&lt;p&gt;You should have received a copy of the GNU General Public License along with
FormIt; if not, write to the Free Software Foundation, Inc., 59 Temple Place,
Suite 330, Boston, MA 02111-1307 USA&lt;/p&gt;
</long-description>
      <tag name="package" description="formit"/>
    </docblock>
    <class final="false" abstract="false" line="25" namespace="default">
      <name>FormIt</name>
      <extends/>
      <full_name>\FormIt</full_name>
      <docblock>
        <description/>
        <long-description>
</long-description>
        <tag name="package" description="formit" line="22"/>
      </docblock>
      <property final="false" static="false" visibility="public" line="30">
        <name>$debugTimer</name>
        <default>0</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="var" description="In debug mode, will monitor execution time." type="int" line="26">
            <type by_reference="false">int</type>
          </tag>
          <tag name="access" description="public" line="26"/>
        </docblock>
      </property>
      <property final="false" static="false" visibility="private" line="34">
        <name>$_initialized</name>
        <default>false</default>
        <docblock>
          <description/>
          <long-description>
</long-description>
          <tag name="var" description="True if the class has been initialized or not." type="boolean" line="31">
            <type by_reference="false">boolean</type>
          </tag>
        </docblock>
      </property>
      <method final="false" abstract="false" static="false" visibility="public" line="42">
        <name>__construct</name>
        <docblock>
          <description>FormIt constructor</description>
          <long-description>
</long-description>
          <tag name="param" description="&amp;amp;$modx A reference to the modX instance." type="\modX" variable="$modx" line="36">
            <type by_reference="false">\modX</type>
          </tag>
          <tag name="param" description="An array of configuration options. Optional." type="array" variable="$config" line="36">
            <type by_reference="false">array</type>
          </tag>
        </docblock>
        <argument line="42">
          <name>$modx</name>
          <default/>
          <type>modX</type>
        </argument>
        <argument line="42">
          <name>$config</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="85">
        <name>initialize</name>
        <docblock>
          <description>Initialize the component into a context and provide context-specific
handling actions.</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="77"/>
          <tag name="param" description="The context to initialize FormIt into" type="string" variable="$context" line="77">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="" type="mixed" line="77">
            <type by_reference="false">mixed</type>
          </tag>
        </docblock>
        <argument line="85">
          <name>$context</name>
          <default>web</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="106">
        <name>loadValidator</name>
        <docblock>
          <description>Loads the Validator class.</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="98"/>
          <tag name="param" description="array An array of configuration parameters for the validator class" type="\$config" variable="$config" line="98">
            <type by_reference="false">\$config</type>
          </tag>
          <tag name="return" description="An instance of the fiValidator class." type="\fiValidator" line="98">
            <type by_reference="false">\fiValidator</type>
          </tag>
        </docblock>
        <argument line="106">
          <name>$config</name>
          <default>array</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="125">
        <name>loadHooks</name>
        <docblock>
          <description>Loads the Hooks class.</description>
          <long-description>
</long-description>
          <tag name="access" description="public" line="116"/>
          <tag name="param" description="string The type of hook to load." type="\$type" variable="$type" line="116">
            <type by_reference="false">\$type</type>
          </tag>
          <tag name="param" description="array An array of configuration parameters for the hooks class" type="\$config" variable="$config" line="116">
            <type by_reference="false">\$config</type>
          </tag>
          <tag name="return" description="An instance of the fiHooks class." type="\fiHooks" line="116">
            <type by_reference="false">\fiHooks</type>
          </tag>
        </docblock>
        <argument line="125">
          <name>$type</name>
          <default>post</default>
          <type/>
        </argument>
        <argument line="125">
          <name>$config</name>
          <default>array</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="140">
        <name>getStoreKey</name>
        <docblock>
          <description>Gets a unique session-based store key for storing form submissions.</description>
          <long-description>
</long-description>
          <tag name="return" description="" type="string" line="135">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="151">
        <name>loadReCaptcha</name>
        <docblock>
          <description>Load the reCaptcha service class</description>
          <long-description>
</long-description>
          <tag name="param" description="An array of configuration parameters for the reCaptcha class" type="array" variable="$config" line="144">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="An instance of the reCaptcha class" type="\reCaptcha" line="144">
            <type by_reference="false">\reCaptcha</type>
          </tag>
        </docblock>
        <argument line="151">
          <name>$config</name>
          <default>array</default>
          <type>array</type>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="174">
        <name>getChunk</name>
        <docblock>
          <description>Gets a Chunk and caches it; also falls back to file-based templates
for easier debugging.</description>
          <long-description>&lt;p&gt;Will always use the file-based chunk if $debug is set to true.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="163"/>
          <tag name="param" description="The name of the Chunk" type="string" variable="$name" line="163">
            <type by_reference="false">string</type>
          </tag>
          <tag name="param" description="The properties for the Chunk" type="array" variable="$properties" line="163">
            <type by_reference="false">array</type>
          </tag>
          <tag name="return" description="The processed content of the Chunk" type="string" line="163">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="174">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
        <argument line="174">
          <name>$properties</name>
          <default>array</default>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="private" line="201">
        <name>_getTplChunk</name>
        <docblock>
          <description>Returns a modChunk object from a template file.</description>
          <long-description>
</long-description>
          <tag name="access" description="private" line="193"/>
          <tag name="param" description="The name of the Chunk. Will parse to name.chunk.tpl" type="string" variable="$name" line="193">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="Returns the modChunk object if found, otherwise false." type="\modChunk/boolean" line="193">
            <type by_reference="false">\modChunk/boolean</type>
          </tag>
        </docblock>
        <argument line="201">
          <name>$name</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="public" line="225">
        <name>output</name>
        <docblock>
          <description>Output the final output and wrap in the wrapper chunk. Optional, but
recommended for debugging as it outputs the execution time to the output.</description>
          <long-description>&lt;p&gt;Also, it is good to output your snippet code with wrappers for easier
CSS isolation and styling.&lt;/p&gt;
</long-description>
          <tag name="access" description="public" line="214"/>
          <tag name="param" description="The output to process" type="string" variable="$output" line="214">
            <type by_reference="false">string</type>
          </tag>
          <tag name="return" description="The final wrapped output" type="string" line="214">
            <type by_reference="false">string</type>
          </tag>
        </docblock>
        <argument line="225">
          <name>$output</name>
          <default/>
          <type/>
        </argument>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="238">
        <name>startDebugTimer</name>
        <docblock>
          <description>Starts the debug timer.</description>
          <long-description>
</long-description>
          <tag name="access" description="protected" line="232"/>
          <tag name="return" description="The start time." type="int" line="232">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
      <method final="false" abstract="false" static="false" visibility="protected" line="254">
        <name>endDebugTimer</name>
        <docblock>
          <description>Ends the debug timer and returns the total number of seconds script took
to run.</description>
          <long-description>
</long-description>
          <tag name="access" description="protected" line="247"/>
          <tag name="return" description="The end total time to execute the script." type="int" line="247">
            <type by_reference="false">int</type>
          </tag>
        </docblock>
      </method>
    </class>
  </file>
  <package name=""/>
  <package name="formit"/>
  <namespace name="default"/>
  <marker>todo</marker>
  <marker>fixme</marker>
</project>
